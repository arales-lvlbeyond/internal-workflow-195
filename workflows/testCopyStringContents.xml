<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2019 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  ~
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/workflow.xsd"
          id="testCopyStringContents"
          name="Test Copy String Contents"
          executionLabelExpression="Test Copy String Contents"
          subjectDOClassName="AssetMaster"
          showInUserInterface="true"
          resultDataDef=""
          sdkVersion=""
>

    <initialStepName>case G</initialStepName>

    <copyFileStep name="case G"
                  sourceFileExpression="Some String Contents!"
                  targetDirectoryExpression="${#filepath(existingVirtualTargetFile)}"
                  targetFilenameExpression="textContents.txt"
                  resultDataDef="resultG">
        <transition condition="${resultG.exists() AND #filename(resultG).equals('textContents.txt')}">
            <targetStepName>cleanup G</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>fail</targetStepName>
        </transition>
        <exception-transition type="WorkflowException">
            <targetStepName>fail</targetStepName>
        </exception-transition>
    </copyFileStep>
    
    <deleteFileStep name="cleanup G"
                    sourceFilesExpression="${resultG}"
                    nextStep="end"/>
                    
    <noopStep name="end"/>
                    
    <failWorkflowStep name="fail" reasonExpression="data error."/>
    
    <contextDataDef name="existingVirtualTargetFile" dataType="File" defaultDataExpression="${subject.originalContent.file}"/>
    <contextDataDef name="resultG" dataType="File"/>

</workflow>