<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xsi:schemaLocation="
		http://levelsbeyond.com/schema/latest
		https://s3-us-west-2.amazonaws.com/schema.levelsbeyond.com/2.3.16.17962/studio.xsd
	"
	id="makeXMLFile"
	name="Make XML"
	executionLabelExpression="Make XML | File Name: xmlFile.name"
	subjectDOClassName=""
	showInUserInterface="false"
	sdkVersion="">

	<initialStepName>make xml</initialStepName>
	
	<groovyStep name="make xml"
		resultDataDef="xmlFile"
	>
		<transition condition="${xmlFile.exists()}">
			<targetStepName>end</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>file failed to be created</targetStepName>
		</transition>
		
		<script>
			<![CDATA[
				import java.io.StringWriter
				import groovy.xml.MarkupBuilder
				import groovy.xml.XmlUtil
				import groovy.util.XmlParser
				import groovy.xml.StreamingMarkupBuilder
				
				def xmlBuilder = new StreamingMarkupBuilder()
				xmlBuilder.encoding = "utf-8"
				
				def xml = xmlBuilder.bind {
					mkp.xmlDeclaration()
					MarquisEDL(version: "2.0") {
						FrameRate(inputJSON.frameRateFormat.asText())
						ClipList {
							Clip {
								UID(uuidTitle)
								Title(uuidTitle)
								File(inputJSON.filePath.asText())
								Start(inputJSON.startTimecode.asText())
								End(inputJSON.endTimecode.asText())
								NumberVideoTracks(inputJSON.numberVideoTracks.asText())
								NumberAudioTracks(inputJSON.numberAudioTracks.asText())
							}
						}
					}
				}
				
				File file = new File("/reachengine/temp/testFile3.xml")
				FileWriter writer = new FileWriter(file)
				writer.write(xml.toString())
				writer.close()
				
				if (!file.exists())
					return null
				
				return file
			]]>
		</script>
		
	</groovyStep>
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- fail -->
	<failWorkflowStep name="file failed to be created"
		executionLabelExpression="file failed to be created"
		reasonExpression="file failed to be created"
	/>
	
	<!-- success -->
	<noopStep name="end" />
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	<contextDataDef name="inputJSON"                dataType="JSON" />
	
	<!-- ......... PROCESSING ........... -->
	<contextDataDef name="xmlFile"                  dataType="File" />
	<contextDataDef name="uuidTitle"                dataType="String"           defaultDataExpression="${#uuid()}"/>
</workflow>