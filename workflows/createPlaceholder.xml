<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  ~
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/workflow-1.2.xsd"
          id="createPlaceholder"
          name="Create Placeholder"
          description=""
          executionLabelExpression="create placeholder with name ${assetName}"
          deadlineExpression=""
          subjectDOClassName=""
          showInUserInterface="false"
          resultDataDef="placeholderAsset"

>
    <initialStepName>create placeholder</initialStepName>


    <groovyStep name="create placeholder"
                executionLabelExpression="${#this.name} - Execution Time: ${T(String).valueOf(#this.getEndDate().getTime() - #this.getStartDate().getTime())}ms --- Time To First Step Overhead: ${T(String).valueOf(#this.getStartDate().getTime() - #root.getStartDate().getTime())}ms"
                resultDataDef="placeholderAsset"
		>
			<script>
                <![CDATA[
                    import com.routeto1.spring.ApplicationContextHolder
                    import com.levelsbeyond.resource.asset.placeholder.PlaceholderAssetDTO
                    import com.levelsbeyond.service.inventory.reference.InventoryReferenceService
                    import com.levelsbeyond.service.inventory.PlaceholderAssetService
                    import com.levelsbeyond.persistence.domain.asset.type.InventoryAssetType
                    import com.routeto1.asset.filesystem.AssetMaster
                    import com.routeto1.services.asset.AssetService

				    InventoryReferenceService inventoryReferenceService = ApplicationContextHolder.getApplicationContext().getBean(InventoryReferenceService.class)
					PlaceholderAssetService placeholderAssetService = ApplicationContextHolder.getApplicationContext().getBean(PlaceholderAssetService.class)
					AssetService assetService = ApplicationContextHolder.getApplicationContext().getBean(AssetService.class)

                    InventoryAssetType inventoryAssetType = inventoryReferenceService.getAssetTypeForKey(assetType)
                    PlaceholderAssetDTO placeholderAsset = PlaceholderAssetDTO.builder().setName(assetName).setInventoryAssetType(inventoryAssetType.name()).build()
                    PlaceholderAssetDTO createdPlaceholderAsset = placeholderAssetService.create(placeholderAsset)
                    AssetMaster assetMaster = assetService.getAsset(createdPlaceholderAsset.getId(), AssetMaster.class)
                    return assetMaster
				]]>
			</script>

        <transition condition="${setSomeMetadata}">
            <targetStepName>set string metadata</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>end</targetStepName>
        </transition>
	</groovyStep>

    <saveDataObjectStep name="set string metadata"
                        dataObjectExpression="${placeholderAsset.metadata}"
                        nextStep="end"
    >
        <property name="testSmallText">${assetName}</property>
    </saveDataObjectStep>

    <noopStep name="end"/>

    <contextDataDef name="setSomeMetadata" dataType="Boolean" defaultDataExpression="true"/>
    <contextDataDef name="assetType" dataType="String" defaultDataExpression="video"/>
    <contextDataDef name="assetName" dataType="String"/>
    <contextDataDef name="placeholderAsset" dataType="Data Object"/>

</workflow>