<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xmlns="http://levelsbeyond.com/schema/workflow"
		  xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
		  xsi:schemaLocation="
        http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/workflow-4.9.xsd
        http://levelsbeyond.com/schema/workflow/nimbus http://www.levelsbeyond.com/schema/production/nimbus-common-workflow-1.5.xsd"
		  id="_assetIngest"
		  name="Ingest Video Asset"
		  executionLabelExpression="Ingest video file ${fileToIngest.name} into repository"
		  description=""
		  subjectDOClassName=""
		  showInUserInterface="false"
		  resultDataDef="assetVersion"
		  deadlineExpression=""
		  sdkVersion="4.2">

	<initialStepName>init existing asset content</initialStepName>

	<setContextData name="init existing asset content"
					targetDataDef="existingAssetContent"
					valueExpression="${#assetService().getAssetContent(fileToIngest)}"
			>
		<transition condition="${true}">
			<targetStepName>check for existing asset</targetStepName>
		</transition>

	</setContextData>

	<noopStep name="check for existing asset">
		<transition condition="${existingAssetContent != null}">
			<targetStepName>set existing asset version</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check if duplicate asset names are allowed</targetStepName>
		</transition>
	</noopStep>

	<noopStep name="check if duplicate asset names are allowed">
		<transition condition="${allowDuplicateNamesFlag}">
			<targetStepName>set skip mezzanine flag</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>convert file name for duplicate asset check</targetStepName>
		</transition>
	</noopStep>

	<setContextData name="convert file name for duplicate asset check"
					targetDataDef="fileToIngestName"
					valueExpression="${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(fileToIngest.name)}">
		<transition condition="${true}">
			<targetStepName>check for duplicate asset</targetStepName>
		</transition>
	</setContextData>

	<queryStep name="check for duplicate asset"
			   targetDataObjectClass="AssetVersion"
			   resultDataDef="existingAssetVersion">
		<transition condition="${existingAssetVersion != null}">
			<targetStepName>set existing asset master</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>set skip mezzanine flag</targetStepName>
		</transition>
		<criteria>
			<![CDATA[
            <criteria>
            <and>
                <condition property="name" op="eq"><test value="${fileToIngestName}"/></condition>
                <condition property="currentVersionFlag" op="eq"><test value="true"/></condition>                
            </and>
            </criteria>
            ]]>
		</criteria>
	</queryStep>

	<setContextData name="set existing asset version"
					targetDataDef="existingAssetVersion"
					valueExpression="${existingAssetContent.asset.currentVersion}"
					devStep="true"
			>
		<transition condition="${true}">
			<targetStepName>set existing asset master</targetStepName>
		</transition>

	</setContextData>

	<setContextData name="set existing asset master"
					targetDataDef="existingAssetMaster"
					valueExpression="${existingassetMaster}"
					devStep="true"
			>
		<transition condition="${true}">
			<targetStepName>set asset version</targetStepName>
		</transition>

	</setContextData>

	<setContextData name="set asset version"
					targetDataDef="assetVersion"
					valueExpression="${existingAssetVersion}"
					devStep="true"
			>
		<transition condition="${true}">
			<targetStepName>log content lengths</targetStepName>
		</transition>

	</setContextData>

	<testStep name="log content lengths"
			  devStep="true"
			  outputExpression="incoming file length = ${fileToIngest.length}, current asset file length = ${existingAssetVersion?.originalContent?.fileSize}"
			>
		<transition condition="=true">
			<targetStepName>compare content length</targetStepName>
		</transition>
	</testStep>

	<noopStep name="compare content length">
		<transition condition="${fileToIngest.length == existingAssetVersion?.originalContent?.fileSize}">
			<targetStepName>check for asset metadata</targetStepName>
		</transition>
		<transition condition="${existingAssetContent != null}">
			<targetStepName>check for asset metadata</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>set skip mezzanine flag</targetStepName>
		</transition>
	</noopStep>

	<!-- default the skip mezz flag.  If set by invocation use, otherwise base on whether a mezz template has been set -->
	<setContextData name="set skip mezzanine flag"
					targetDataDef="skipMezzanineFlag"
					valueExpression="${skipMezzanineFlag ?: (mezzanineTemplate == null)}"
					devStep="true"
			>
		<transition condition="${customRepoSource != null}">
			<targetStepName>move source to custom repo</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>ingest file</targetStepName>
		</transition>
	</setContextData>

	<!-- customRepo subflow -->
	<executeSubflowStep
			name="move source to custom repo"
			targetWorkflowId="_moveToCustomRepo"
			resultDataDef="fileToIngest"
			>
		<transition condition="true">
			<targetStepName>ingest file</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="fileToIngest" subflowDataDef="fileToIngest"/>
		<subflowContextDataMapping parentDataDef="customRepoSource" subflowDataDef="repoDirectoryString"/>
	</executeSubflowStep>

	<saveAssetStep name="ingest file"
				   executionLabelExpression="Ingesting file ${fileToIngest.path}"
				   contentExpression="${fileToIngest}"
				   assetExpression="${existingAssetVersion}"
				   contentUseExpression="${skipMezzanineFlag ? '|SOURCE|MEZZANINE|' : 'SOURCE'}"
				   pctComplete="10"
				   resultDataDef="assetVersion">

		<transition condition="=true">
			<targetStepName>get asset master</targetStepName>
		</transition>
	</saveAssetStep>
	
	<setContextData name="get asset master"
		targetDataDef="assetMaster"
		valueExpression="${assetVersion.masterAsset}"
		devStep="true"
		nextStep="check for asset metadata"
		/>

	<noopStep name="check for asset metadata">
		<transition condition="${metadata != null and metadata.size() > 0}">
			<targetStepName>save asset metadata</targetStepName>
		</transition>
		<transition condition="${jsonMetadata != null}">
			<targetStepName>save asset metadata</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>save path metadata</targetStepName>
		</transition>
	</noopStep>

	<saveDataObjectStep name="save asset metadata"
						dataObjectExpression="${assetMaster.metadata}"
						nameValuePairsDataDef="metadata"
						jsonValuesDataDef="jsonMetadata"
			>
		<transition condition="=true">
			<targetStepName>save path metadata</targetStepName>
		</transition>
	</saveDataObjectStep>

	<nimbus:savePathMetadataStep name="save path metadata"
								 metadataObjectExpression="${assetMaster.metadata}"
								 assetFileExpression="${fileToIngest}"
								 rootPathExpression="${metadataRootPath}"
								 metadataPropertiesExpression="${metadataPathProperties}"
			>
		<transition condition="${exifExtraction == true}">
			<targetStepName>extract exif metadata</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check for asset category</targetStepName>
		</transition>
	</nimbus:savePathMetadataStep>

	<!-- exif? -->
	<executeSubflowStep name="extract exif metadata"
						targetWorkflowId="_extractExifFromFile"
						subjectChangePath="${ assetVersion.file }"
						subflowTargetDataDef="fileToIngest"
						resultDataDef="exifMetadata"
						continueOnException="false"
						pctComplete="60"
			>
		<transition condition="${exifMetadata != null}">
			<targetStepName>apply metadata to result</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>check for asset category</targetStepName>
		</transition>

	</executeSubflowStep>

	<!-- apply exif metadata to result -->
	<nimbus:setMetadataValuesStep name="apply metadata to result"
								  displayName="Apply metadata to the asset"
								  targetExpression="${ assetMaster.metadata }"
								  propertyPrefixExpression="${ exifPrefix }"
								  metadataPairsExpression="${ exifMetadata }"
								  metadataGroupExpression="${ exifMetadataGroupName }"
								  createIfNotFoundExpression="${ true }"
								  continueOnException="false"
								  pctComplete="70">

		<transition condition="${ true }">
			<targetStepName>check for asset category</targetStepName>
		</transition>
	</nimbus:setMetadataValuesStep>

	<!-- single category for legacy workflows -->
	<noopStep name="check for asset category">
		<transition condition="${ categoryName != null }">
			<targetStepName>set asset category</targetStepName>
		</transition>
		<transition condition="${categories.size() > 0}">
			<targetStepName>add categories to asset</targetStepName>
		</transition>
		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>check for mezzanine</targetStepName>
		</transition>
	</noopStep>

	<nimbus:changeMetaCategoryStep
			name="set asset category"
			targetObjectExpression="${assetMaster}"
			>

		<transition condition="${categories.size() > 0}">
			<targetStepName>add categories to asset</targetStepName>
		</transition>
		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>check for mezzanine</targetStepName>
		</transition>

		<nimbus:addCategory>${categoryName}</nimbus:addCategory>
	</nimbus:changeMetaCategoryStep>

	<!-- multi category addition -->
	<executeSubflowStep
			name="add categories to asset"
			targetWorkflowId="_addCategoryOrCollectionToAsset"
			subjectChangePath="${categories}"
			subflowTargetDataDef="category">

		<transition condition="${collections.size() > 0}">
			<targetStepName>add collections to asset</targetStepName>
		</transition>
		<transition condition="${ true }">
			<targetStepName>check for mezzanine</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="assetMaster" subflowDataDef="asset"/>
	</executeSubflowStep>

	<!-- multi collection addition -->
	<executeSubflowStep
			name="add collections to asset"
			targetWorkflowId="_addCategoryOrCollectionToAsset"
			subjectChangePath="${collections}"
			subflowTargetDataDef="collection">

		<transition condition="${ true }">
			<targetStepName>check for mezzanine</targetStepName>
		</transition>
		<subflowContextDataMapping parentDataDef="assetMaster" subflowDataDef="asset"/>
	</executeSubflowStep>

	<noopStep name="check for mezzanine"
			  executionLabelExpression="Checking for mezzanine of ${assetVersion.name}."
			  pctComplete="20"
			>

		<!--  if there is already mezz content and it was sourced from this version (so no possibility of a new version), skip mezz creation -->
		<transition condition="${#mezzanineContent(assetVersion) != null and #mezzanineContent(assetVersion).initialVersion == assetVersion}">
			<targetStepName>create proxies</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check for mezz template</targetStepName>
		</transition>
	</noopStep>

	<noopStep name="check for mezz template"
			  executionLabelExpression="Checking for mezzanine template for ${assetVersion.name}">

		<transition condition="${!skipMezzanineFlag and mezzanineTemplate != null}">
			<targetStepName>create mezzanine</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>set original content as mezzanine</targetStepName>
		</transition>
	</noopStep>

	<noopStep name="create mezzanine"
		nextStep="create proxies"
		>
		
	</noopStep>
	<!--<executeSubflowStep-->
			<!--name="create mezzanine"-->
			<!--targetWorkflowId="_createMezzVideo"-->
			<!--pctComplete="50"-->
			<!--subjectChangePath="=assetMaster">-->

		<!--<transition condition="=true">-->
			<!--<targetStepName>create proxies</targetStepName>-->
		<!--</transition>-->

		<!--<subflowContextDataMapping parentDataDef="customRepoMezzanine" subflowDataDef="customRepoMezzanine"/>-->
		<!--<subflowContextDataMapping subflowDataDef="mezzTemplate" parentDataDef="mezzanineTemplate"/>-->
		<!--<subflowContextDataMapping subflowDataDef="sourceCopyPath" parentDataDef="sourceCopyPath"/>-->
		<!--<subflowContextDataMapping parentDataDef="mezzaninePriority" subflowDataDef="priority"/>-->
	<!--</executeSubflowStep>-->

	<saveDataObjectStep
			name="set original content as mezzanine"
			targetDataObjectClass="AssetContent"
			dataObjectExpression="${assetVersion.originalContent}">

		<transition condition="${proxyTemplate != null}">
			<targetStepName>create proxies</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check whether to raise event</targetStepName>
		</transition>
		<property name="contentUses">|SOURCE|MEZZANINE|</property>
	</saveDataObjectStep>

	<executeSubflowStep name="create proxies"
						targetWorkflowId="_createVideoProxies"
						subjectChangePath="${assetMaster}"
						pctComplete="70"
						waitForCompletionExpression="${!asyncProxiesFlag}"
			>
		<transition condition="${ true }">
			<targetStepName>check whether to raise event</targetStepName>
		</transition>
		
		<subflowContextDataMapping subflowDataDef="proxyTemplate" parentDataDef="proxyTemplate"/>
		<subflowContextDataMapping parentDataDef="proxyPriority" subflowDataDef="proxyPriority"/>
	</executeSubflowStep>

	<noopStep name="check whether to raise event">
		<transition condition="${existingAssetVersion == null}">
			<targetStepName>raise asset ingested event</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>raise ensure indexed event</targetStepName>
		</transition>
	</noopStep>

	<raiseWorkflowEventStep
			name="raise asset ingested event"
			eventTypeExpression="AssetIngested"
			continueOnException="true"
			executionLabelExpression="Sending Asset Ingested event"
			emailAddressesExpression="${emailAddresses}"
			summaryExpression="Asset ${assetVersion.name} has been ingested successfully"
			>
		<transition condition="${true}">
			<targetStepName>raise ensure indexed event</targetStepName>
		</transition>

		<property name="ingestedFileName">${fileToIngest.name}</property>
		<property name="ingestedFilePath">${fileToIngest.absolutePath}</property>
	</raiseWorkflowEventStep>

	<testStep name="log unchanged asset" outputExpression="Asset file ${fileToIngest.name} has not been modified, skipping ingest."/>

	<raiseWorkflowEventStep name="raise ensure indexed event"
							eventTypeExpression="ensureIndexed"
							executionLabelExpression="Ensure Asset Indexed "
							nextStep="end">
		<property name="indexTargetRef">${assetMaster}</property>
	</raiseWorkflowEventStep>
	
	<noopStep name="end"/>

	<contextDataDef name="collections" label="Collections" dataType="Data Object" multiple="true" userInput="true"/>
	<contextDataDef name="categories" label="Categories" dataType="Data Object" multiple="true" userInput="true"/>
	<!-- transcode priorities -->
	<contextDataDef name="prioritiesJson" dataType="JSON" defaultDataExpression="{mezzanine:&quot;25&quot;, proxy:&quot;50&quot;, thumbnailMovie:&quot;75&quot;}"/>
	<contextDataDef name="mezzaninePriority" dataType="Integer" defaultDataExpression="${prioritiesJson.mezzanine}"/>
	<contextDataDef name="proxyPriority" dataType="Integer" defaultDataExpression="${prioritiesJson.proxy}"/>
	<contextDataDef name="thumbnailVideoPriority" dataType="Integer" defaultDataExpression="${prioritiesJson.thumbnailMovie}"/>
	<!-- custom repo: {source:"/path/to/where/the/repo/file/will/go",mezzanine:"ditto",proxies:"ditto"} note:proxies (all proxies), not proxy! -->
	<contextDataDef name="customRepoLocationJson" dataType="JSON" defaultDataExpression="{}"/>
	<!-- calculated for repo locations -->
	<contextDataDef name="customRepoSource" dataType="String" defaultDataExpression="${customRepoLocationJson.get('source')}"/>
	<contextDataDef name="customRepoMezzanine" dataType="String" defaultDataExpression="${customRepoLocationJson.get('mezzanine')}"/>
	<contextDataDef name="customRepoProxies" dataType="String" defaultDataExpression="${customRepoLocationJson.get('proxies')}"/>

	<!-- asynchronous creation of proxies -->
	<contextDataDef name="asyncProxiesFlag" dataType="Boolean" defaultDataExpression="false"/>
	<!-- exif extraction flag -->
	<contextDataDef name="exifExtraction" dataType="Boolean" defaultDataExpression="false"/>
	<contextDataDef name="exifMetadata" dataType="NameValuePair" multiple="true"/>
	<contextDataDef name="exifMetadataGroupName" label="Metadata Group" dataType="String" defaultDataExpression="EXIF Metadata"/>
	<contextDataDef name="exifPrefix" dataType="String" defaultDataExpression="exif"/>
	
	<contextDataDef name="skipMezzanineFlag" label="Use Source as Mezzanine" dataType="Boolean" userInput="true"/>
	<contextDataDef name="allowDuplicateNamesFlag" dataType="Boolean" defaultDataExpression="${false}"/>
	<contextDataDef dataType="File" name="fileToIngest" label="File" required="true" userInput="true"></contextDataDef>
	<contextDataDef name="fileToIngestName" dataType="String"/>
	<contextDataDef dataType="File" name="thumbnailVideo"></contextDataDef>
	<contextDataDef dataType="File" name="thumbnailFile"></contextDataDef>
	<contextDataDef dataType="Directory" name="sourceCopyPath">
		<description>
			Optional intermediary directory before transcode. Use this path if the transcoder does not have direct
			access to the repository
		</description>
	</contextDataDef>
	<contextDataDef dataType="Data Object" name="assetVersion"></contextDataDef>
	<contextDataDef dataType="Data Object" name="existingAssetMaster"></contextDataDef>
	<contextDataDef dataType="Data Object" name="existingAssetVersion"></contextDataDef>
	<contextDataDef dataType="Data Object" name="existingAssetContent"></contextDataDef>
	<contextDataDef name="metadataRootPath" dataType="Directory"/>
	<contextDataDef name="metadataPathProperties" dataType="String" multiple="true"/>
	<contextDataDef name="metadata" dataType="NameValuePair" multiple="true"/>
	<contextDataDef name="jsonMetadata" dataType="JSON" multiple="false"/>
	<contextDataDef name="categoryName" dataType="String"/>
	<contextDataDef dataType="String" name="mezzanineTemplate" defaultDataExpression="=#mezzanineTemplate(assetVersion)?.name"></contextDataDef>
	<contextDataDef dataType="String" name="proxyTemplate" defaultDataExpression="=#proxyTemplate(assetVersion)?.name"></contextDataDef>
	<contextDataDef dataType="String" name="thumbnailVideoTemplate" defaultDataExpression="=#thumbnailMovTemplate(assetVersion)?.name"></contextDataDef>
	<contextDataDef name="emailAddresses" dataType="String" multiple="true"/>
	<contextDataDef dataType="Data Object" name="thumbnailContent"></contextDataDef>
	<contextDataDef name="thumbnailPercentage" dataType="Integer"/>
	<contextDataDef name="assetMaster" dataType="Data Object"/>
</workflow>