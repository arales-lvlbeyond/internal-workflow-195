<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xsi:schemaLocation="
		http://levelsbeyond.com/schema/latest
		https://s3-us-west-2.amazonaws.com/schema.levelsbeyond.com/2.3.16.17962/studio.xsd
	"
	id="writeToLogFile"
	name="writeToLogFile"
	executionLabelExpression="writeToLogFile | Log file: ${errorLogFile.absolutePath}"
	subjectDOClassName=""
	showInUserInterface="false"
	sdkVersion="">

	<initialStepName>write to log</initialStepName>
	
	<queryStep name="check if workflow is running"
		targetDataObjectClass="WorkflowExecution"
		resultDataDef="currentExecutions"
		pctComplete="1"
		executionLabelExpression="Is a workflow running on this directory already? ${currentExecutions.size() != 0}"
		>
		<transition condition="${currentExecutions.size() == 0}">
			<targetStepName>write to log</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>workflow is running</targetStepName>
		</transition>

		<criteria>
			<![CDATA[
                <criteria>
                    <and>
                        <condition property="workflowVersion.workflow.key" op="eq">
                            <test value="${ #this.workflow.workflowVersion.workflow.key }" />
                        </condition>
                        <condition property="uuid" op="noteq">
                            <test value="${ #this.workflow.uuid }" />
                        </condition>
                        <condition property="executionLabel" op="like">
							<test value="%${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(errorLogFile.absolutePath)}%" />
						</condition>
                        <condition property="status" op="in">
                            <tests>
                                <test value="CREATED" />
                                <test value="QUEUED" />
                                <test value="EXECUTING" />
                            </tests>
                        </condition>
                    </and>
                </criteria>
            ]]>
		</criteria>
	</queryStep>
	
	<delayStep name="workflow is running"
		executionLabelExpression="Workflow is running. Waiting ${delaySeconds} to try again."
		delaySecondsExpression="${delaySeconds}"
		nextStep="decrement retry limit"
	/>
	
	<setContextData name="decrement retry limit"
		targetDataDef="retryLimit"
		valueExpression="${retryLimit - 1}"
		devStep="true"
	>
		<transition condition="${retryLimit &gt; 0}">
			<targetStepName>check if workflow is running</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>end</targetStepName>
		</transition>
	</setContextData>
	
	<groovyStep name="write to log"
		executionLabelExpression="Writing error message for ${file.name} to log file"
		resultDataDef="errorLogFile"
		nextStep="end"
		devStep="true"
	>
		<script>
			<![CDATA[
			import com.csvreader.CsvWriter
			import java.io.File
			import java.text.SimpleDateFormat
			import com.routeto1.filesystem.FileWrapperUtils
			
			char delimiter = ','
			
			
			// Initialize output csv
			CsvWriter outputCsv = new CsvWriter(new FileWriter(errorLogFile.absolutePath, true), delimiter)
			outputCsv.write(file.absolutePath)
			outputCsv.write(errorMsg)
			outputCsv.endRecord()
			outputCsv.close()
			
			return	errorLogFile
			
			]]>
		</script>
	</groovyStep>
	<!-- ................................................... End Steps .................................................... -->
	<!-- success -->
	<noopStep name="end" />
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	<contextDataDef name="errorLogFile"             dataType="File" />
	<contextDataDef name="file"                     dataType="File" />
	<contextDataDef name="errorMsg"                 dataType="String" />
	<!-- ......... PROCESSING ........... -->
	<contextDataDef name="currentExecutions" 	    dataType="Data Object" 	multiple="true"/>
	
	<contextDataDef name="retryLimit"               dataType="Integer"      defaultDataExpression="10" />
	<contextDataDef name="delaySeconds"             dataType="Integer"      defaultDataExpression="15"/>
  
    
</workflow>