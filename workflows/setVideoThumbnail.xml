<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xsi:schemaLocation="
		http://levelsbeyond.com/schema/latest
		https://s3-us-west-2.amazonaws.com/schema.levelsbeyond.com/2.3.16.17962/studio.xsd
	"
	id="setVideoThumbnail"
	name="Set Video Thumbnail"
	executionLabelExpression="Set Video Thumbnail"
	subjectDOClassName="VideoAssetMaster"
	showInUserInterface="true"
	group="Migration"
	sdkVersion="">

	<initialStepName>create thumb video</initialStepName>
	
	<submitHttpStep name="set thumbnail"
		executionLabelExpression="Setting Video Thumbnail to ${video.name}"
		requestMethodExpression="PUT"
		urlExpression="${requestUrl}"
		responsePayloadDataDef="jsonResponse"
		responseCodeDataDef="responseCode"
	>
		<transition condition="${responseCode.toString().startsWith('2')}">
			<targetStepName>end</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>error setting thumbnail</targetStepName>
		</transition>
		<requestPayloadItem name="body">
			{ "id" : ${video.id} }
		</requestPayloadItem>
		<requestHeader name="auth_user">system</requestHeader>
		<requestHeader name="auth_password">password</requestHeader>
	</submitHttpStep>
	
	<!-- ................................................ Thumbnail Video Steps ................................................ -->
	<convertVideoStep name="create thumb video"
		sourceFileExpression="${sourceFile}"
		imageSequenceInfoExpression="${#imageSequenceInfo(#sourceContent(subject))}"
		mediaConversionTemplateExpression="${thumbVideoTemplate}"
		resultDataDef="tempThumbVideoFile"
		priorityExpression="${thumbVideoPriority}"
		continueOnException="true"
		executionLabelExpression="Transcode thumb video from original file. | Profile: ${thumbVideoTemplate}"
		pctComplete="55"
	>
		<transition condition="${tempThumbVideoFile?.exists()}">
			<targetStepName>set thumb video file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>thumb video error</targetStepName>
		</transition>
	</convertVideoStep>
	
	
	<setContextData name="set thumb video file"
		targetDataDef="thumbVideoFile"
		valueExpression="${tempThumbVideoFile}"
		pctComplete="56"
		devStep="true"
	>
		<transition condition="${#thumbnailMovContent(subject) != null AND #thumbnailMovContent(subject).file.exists()}">
			<targetStepName>delete old thumb video</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>save thumb video</targetStepName>
		</transition>
	</setContextData>
	
	
	<deleteFileStep name="delete old thumb video"
		sourceFilesExpression="${ #thumbnailMovContent(subject)?.file }"
		executionLabelExpression="deleting old thumb video: ${#thumbnailMovContent(subject)?.file?.absolutePath}"
		continueOnException="true"
		pctComplete="57"
		nextStep="save thumb video"
	/>
	
	
	<saveAssetStep name="save thumb video"
		contentExpression="${thumbVideoFile}"
		contentUseExpression="Thumbnail Video"
		versionAssetExpression="false"
		assetExpression="${subject.currentVersion}"
		executionLabelExpression="Save new thumb video to asset | file: ${thumbVideoFile?.absolutePath}"
		pctComplete="60"
	>
		<!-- Errors -->
		<exception-transition type="WorkflowException">
			<targetStepName>thumb video error</targetStepName>
		</exception-transition>
		<exception-transition type="AssetException">
			<targetStepName>thumb video error</targetStepName>
		</exception-transition>
		<exception-transition type="NullPointerException">
			<targetStepName>thumb video error</targetStepName>
		</exception-transition>
		<!-- Thumb -->
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('') AND #thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('')}">
			<targetStepName>save thumb</targetStepName>
		</transition>
		<transition condition="${createThumb AND #thumbnailMovContent(subject) != null AND #thumbnailMovContent(subject).file.exists()}">
			<targetStepName>create thumb</targetStepName>
		</transition>
		<transition condition="${createThumb}">
			<targetStepName>cannot create thumb</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</saveAssetStep>
	
	
	<noopStep name="thumb video error"
		executionLabelExpression="there was an error creating/saving thumbnail video. | fail? ${failOnError}"
	>
		<transition condition="${failOnError}">
			<targetStepName>thumb video failed</targetStepName>
		</transition>
		<!-- Thumb -->
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('') AND #thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('')}">
			<targetStepName>save thumb</targetStepName>
		</transition>
		<transition condition="${createThumb AND #thumbnailMovContent(subject) != null AND #thumbnailMovContent(subject).file.exists()}">
			<targetStepName>create thumb</targetStepName>
		</transition>
		<transition condition="${createThumb}">
			<targetStepName>cannot create thumb</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ................................................... Thumbnail Steps ................................................... -->
	<convertImageStep name="create thumb"
		sourceFileExpression="${#thumbnailMovContent(subject)?.file}"
		resultDataDef="tempThumbFile"
		thumbnailPercentageExpression="${thumbnailPercentage}"
		priorityExpression="${thumbPriority}"
		continueOnException="true"
		executionLabelExpression="creating new thumbnail from existing Thumbnail Video."
		pctComplete="75"
	>
		<transition condition="${tempThumbFile != null AND tempThumbFile.exists()}">
			<targetStepName>set thumb file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>thumb error</targetStepName>
		</transition>
	</convertImageStep>
	
	
	<setContextData name="set thumb file"
		targetDataDef="thumbFile"
		valueExpression="${tempThumbFile}"
		pctComplete="76"
		devStep="true"
	>
		<transition condition="${#thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>save thumb</targetStepName>
		</transition>
	</setContextData>
	
	
	<deleteFileStep name="delete old thumb"
		sourceFilesExpression="${ #thumbnailContent(subject)?.file }"
		executionLabelExpression="deleting old thumb: ${#thumbnailContent(subject)?.file?.absolutePath}"
		continueOnException="true"
		pctComplete="77"
		nextStep="save thumb"
	/>
	
	
	<saveAssetStep name="save thumb"
		contentExpression="${thumbFile}"
		contentUseExpression="Thumbnail"
		versionAssetExpression="false"
		assetExpression="${subject.currentVersion}"
		executionLabelExpression="Save new thumb to asset | file: ${thumbFile?.absolutePath}"
		pctComplete="80"
	>
		<!-- Errors -->
		<exception-transition type="WorkflowException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<exception-transition type="AssetException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<exception-transition type="NullPointerException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</saveAssetStep>
	
	
	<noopStep name="thumb error"
		executionLabelExpression="there was an error creating/saving thumbnail. | fail? ${failOnError}"
	>
		<transition condition="${failOnError}">
			<targetStepName>thumb failed</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>
	
	
	<noopStep name="cannot create thumb"
		executionLabelExpression="No thumbnailVideo exists on the asset. Thumbnails must be created from a valid thumbnailVideo. | fail? ${failOnError}"
	>
		<transition condition="${failOnError}">
			<targetStepName>thumb failed</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>
	
	<!-- ................................................... Clean Up Steps .................................................... -->
	<noopStep name="cleanup"
		executionLabelExpression="temp files?... mezz? ${tempMezzFile != null AND tempMezzFile.exists()} | proxy? ${tempProxyFile != null AND tempProxyFile.exists()} | thumbnail Video? ${tempThumbVideoFile != null AND tempThumbVideoFile.exists()} | thumbnail? ${tempthumbVideoFile != null AND tempthumbVideoFile.exists()}"
		pctComplete="82"
	>
		<transition condition="${tempThumbVideoFile != null AND tempThumbVideoFile.exists()}">
			<targetStepName>delete temp thumbnail video file</targetStepName>
		</transition>
		<transition condition="${tempthumbVideoFile != null AND tempthumbVideoFile.exists()}">
			<targetStepName>delete temp thumbnail file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>
	
	<deleteFileStep name="delete temp thumbnail video file"
		sourceFilesExpression="${tempThumbVideoFile}"
		continueOnException="true"
		executionLabelExpression="deleting ${tempThumbVideoFile.absolutePath}"
		pctComplete="96"
	>
		<transition condition="${tempthumbVideoFile != null AND tempthumbVideoFile.exists()}">
			<targetStepName>delete temp thumbnail file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</deleteFileStep>
	
	
	<deleteFileStep name="delete temp thumbnail file"
		sourceFilesExpression="${tempthumbVideoFile}"
		continueOnException="true"
		executionLabelExpression="deleting ${tempthumbVideoFile.absolutePath}"
		pctComplete="99"
		nextStep="end"
	/>
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- failure -->
	<failWorkflowStep name="error setting thumbnail"
		executionLabelExpression="Something went wrong when setting the thumbnail for timeline ${timeline.name}. Check the jsonResponse data def in context data to try and troubleshoot the issue."
		reasonExpression="Something went wrong when setting the thumbnail for timeline ${timeline.name}. Check the jsonResponse data def in context data to try and troubleshoot the issue."
	/>
	
	<failWorkflowStep name="thumb video failed"
		reasonExpression="Thumbnail video failed. Check workflow steps for errors."
		executionLabelExpression="Thumbnail video failed. Check workflow steps for errors."
	/>
	
	
	<failWorkflowStep name="thumb failed"
		reasonExpression="Thumbnail failed. Check workflow steps for errors."
		executionLabelExpression="Thumbnail failed. Check workflow steps for errors."
	/>
	
	<!-- success -->
	<noopStep name="end" />
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	<!-- ......... PROCESSING ........... -->
	<contextDataDef name="video"                    dataType="Data Object"  defaultDataExpression="${subject}" />
	
	<!-- reach api data defs -->
	<contextDataDef name="jsonResponse"             dataType="JSON"         defaultDataExpression="{}" />
    <contextDataDef name="responseCode"             dataType="Integer" />
	<contextDataDef name="requestUrl"               dataType="String"       defaultDataExpression="${reachUrl}/reachengine/api/inventory/videos/${video.id}/setVideoThumbnail" />
	
	<!-- Reach Info -->
	<contextDataDef name="reachUrl"                 dataType="String"       defaultDataExpression="${#sysconfig('workflows.setTimelineThumbnail.reachUrl') ?: 'http://10.20.21.195:8080'}" />
	<contextDataDef name="apiKey"                   dataType="String"       defaultDataExpression="${sysconfig('workflows.setTimelineThumbnail.apiKey')}" />
	
	<!-- data defs from system create proxies workflow -->
	<!-- .................................................. Context Data Defs .................................................. -->
	<contextDataDef name="failOnError"          dataType="Boolean"      defaultDataExpression="${#sysconfig('workflows.default.proxies.failOnError') ?: true}"/>
	<!-- Mezz -->
	<contextDataDef name="mezzFile"             dataType="File"/>
	<contextDataDef name="createMezz"           dataType="Boolean"      defaultDataExpression="${#sysconfig('workflows.default.proxies.video.createMezz') ?: false}"/>
	<!-- Proxy -->
	<contextDataDef name="proxyFile"            dataType="File"/>
	<contextDataDef name="createProxy" 			dataType="Boolean"		defaultDataExpression="${#sysconfig('workflows.default.proxies.video.createProxy') ?: true}"/>
	<!-- Thumb Video -->
	<contextDataDef name="thumbVideoFile"       dataType="File"/>
	<contextDataDef name="createThumbVideo" 	dataType="Boolean"	    defaultDataExpression="${#sysconfig('workflows.default.proxies.video.createThumbVideo') ?: true}"/>
	<!-- Thumb -->
	<contextDataDef name="thumbFile"            dataType="File"/>
	<contextDataDef name="createThumb" 			dataType="Boolean"	    defaultDataExpression="${#sysconfig('workflows.default.proxies.video.createThumb') ?: true}"/>
	<!-- templates -->
	<contextDataDef name="mezzTemplate"    		dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.video.mezzTemplate') ?: (#sysconfig('import.mezzanineSettingName') ?: 'FFmpeg Mezz')}" />
	<contextDataDef name="proxyTemplate"    	dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.video.proxyTemplate') ?: (#sysconfig('import.proxySettingName') ?: 'FFmpeg Proxy')}" />
	<contextDataDef name="thumbVideoTemplate"   dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.video.thumbVideoTemplate') ?: (#sysconfig('import.thumbnailMovSettingName') ?: 'FFmpeg Thumb MOV')}" />
	<contextDataDef name="thumbnailPercentage"  dataType="Integer"      defaultDataExpression="${#sysconfig('workflows.default.proxies.video.thumbPercentage') ?: 0}"/>
	<contextDataDef name="prioritiesJson"       dataType="JSON">
		<description>
			A JSON with the structure:
				{"mezzanine":w, "proxy":x, "thumbnailVideo":y, "thumbnail":z}
		</description>
	</contextDataDef>
	
	<!-- .......... Processing variables .......... -->
	<contextDataDef name="sourceFile" 		    dataType="File"         defaultDataExpression="${#sourceContent(subject)?.file}"/>
	<contextDataDef name="mezzPriority"         dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('mezzanine') != null? prioritiesJson.get('mezzanine').asText() : 0}"/>
	<contextDataDef name="proxyPriority"        dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('proxy') != null? prioritiesJson.get('proxy').asText() : 0}"/>
	<contextDataDef name="thumbVideoPriority"   dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('thumbnailVideo') != null? prioritiesJson.get('thumbnailVideo').asText() : 0}"/>
	<contextDataDef name="thumbPriority"        dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('thumbnail') != null? prioritiesJson.get('thumbnail').asText() : 0}"/>
	<contextDataDef name="tempMezzFile"        	dataType="File"/>
	<contextDataDef name="tempProxyFile"        dataType="File"/>
	<contextDataDef name="tempThumbVideoFile"   dataType="File"/>
	<contextDataDef name="tempThumbFile"    	dataType="File"/>

</workflow>