<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2018 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://levelsbeyond.com/schema/workflow"
    xmlns:production="http://levelsbeyond.com/schema/workflow/production"
    xsi:schemaLocation="
    	http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd
    	http://levelsbeyond.com/schema/workflow/production http://levelsbeyond.com/schema/production/nimbus-projects-workflow-1.2.xsd
        "
           
 id="_archiveMezzanineContents"
 name="Find Mezzanine Contents to Archive"
 executionLabelExpression="Archive Mezzanines that are not backed up"
 description="Finds mezzanine content that have not yet been backed up to archive and performs an archive workflow on them."
 subjectDOClassName=""
 showInUserInterface="false"
 deadlineExpression="">
 
    <initialStepName>Check for mezzanine archive enabled</initialStepName>
    
    <noopStep name="Check for mezzanine archive enabled">
        <transition condition="${ mezzArchiveEnabled }">
            <targetStepName>Find Mezzanine Content to Archive</targetStepName>
        </transition>    
        <transition condition="${ true }">
            <targetStepName>Mezzanine Archive is Disabled</targetStepName>
        </transition>
    </noopStep>
    
    <queryStep name="Find Mezzanine Content to Archive"
        executionLabelExpression="Find Mezzanine files to archive"
        targetDataObjectClass="AssetContent"
        resultDataDef="contentsToArchive"
        pctComplete="10"
        >
        
        <transition condition="${ contentsToArchive != null and contentsToArchive.size() &gt; maxBatch }">
            <targetStepName>Limit Contents to Archive</targetStepName>
        </transition>
        <transition condition="${ contentsToArchive != null and contentsToArchive.size() &gt; 0 }">
            <targetStepName>Call Archive Subflow</targetStepName>
        </transition>
        <transition condition="${ true }">
            <targetStepName>End</targetStepName>
        </transition>
        
        <criteria>
            <![CDATA[
            <criteria>
                <and>
                    <condition property="contentUses" op="like">
                        <test value="%MEZZANINE%"/>      
                    </condition>
                    <condition property="restoreKey" op="isnull"/>
                    <condition property="truncatedFlag" op="eq">
                        <test value="false"/>
                    </condition>
                </and>  
            </criteria>            
            ]]>            
        </criteria>
    </queryStep>
    
    <setContextData name="Limit Contents to Archive"
        targetDataDef="contentsToArchive" valueExpression="${ contentsToArchive.subList(0, maxBatch) }"         
        >
        
        <transition condition="${ true }">
            <targetStepName>Call Archive Subflow</targetStepName>
        </transition>        
    </setContextData>
    
    <executeSubflowStep name="Call Archive Subflow"
        executionLabelExpression="Call Archive Subflow on ${ contentsToArchive.size() } Mezzanine Contents"
        targetWorkflowId="${ archiveWorkflowId }"
        subjectChangePath="${ contentsToArchive }"
        pctComplete="99"
    >

        <transition condition="${ true }">
            <targetStepName>End</targetStepName>
        </transition>
    </executeSubflowStep>
    
    <noopStep name="Mezzanine Archive is Disabled"/>
    
	<testStep name="End" outputExpression="${contentsToArchive != null ? contentsToArchive.size() : 0} assets archived."  />

    <!-- INPUT DEFS -->
    <contextDataDef name="archiveWorkflowId" dataType="String" required="true" defaultDataExpression="${ #sysconfig('archive.mezzanine.workflow') }"/>
    <contextDataDef name="maxBatch" dataType="Integer" defaultDataExpression="${ #sysconfig('archive.mezzanine.maxBatchSize') }"/>
    <contextDataDef name="mezzArchiveEnabled" dataType="Boolean" defaultDataExpression="${ #sysconfig('archive.mezzanine.enabled') }"/>    
    
    <!-- PROCESSING DEFS -->
    <contextDataDef name="contentsToArchive" dataType="Data Object" multiple="true"></contextDataDef>
 </workflow>
