<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2018 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
    id="panelIngestAssetToCollectionWithSidecar"
    name="Panel Ingest Asset to Collection With Sidecar"
    executionLabelExpression="Panel - Ingest Asset | File: ${fileToIngest.absolutePath}"
    subjectDOClassName=""
	resultDataDef="sourceFilePathJson"
    showInUserInterface="false"
    sdkVersion=""
	>

	<initialStepName>check to process file</initialStepName>
	

	<!-- .............................................. initial Checks .............................................. -->
	<noopStep name="check to process file"
		executionLabelExpression="Ingest file? ${!extensionFunc.equals('json') AND !filenameFunc.endsWith(':Zone.Identifier')}"
		pctComplete="2"
		>
		<!-- ignore sidecar metadata and Windows system metadata -->
		<transition condition="${extensionFunc.equals('json') OR filenameFunc.endsWith(':Zone.Identifier')}">
			<targetStepName>log skipped metadata</targetStepName>
		</transition>
		<!-- continue with ingest -->
		<transition condition="true">
			<targetStepName>extract metadata from sidecar</targetStepName>
		</transition>
	</noopStep>
	

	<noopStep name="log skipped metadata"
		executionLabelExpression="Skipping individual ingest of metadata file '${filenameFunc}'"
	    pctComplete="50"
	    nextStep="end"
		/>
	
	
	<!-- ................................................ extract metadata ................................................ -->
	<executeSubflowStep name="extract metadata from sidecar"
		targetWorkflowId="panelExtractMetadataFromSidecar"
		subjectChangePath="${metadataFile}"
		subflowTargetDataDef="metadataFile"
		resultDataDef="metadataForm"
		pctComplete="7"
		nextStep="extract clips"
		/>
	
	
	<groovyStep name="extract clips"
		resultDataDef="clipJsons"
		executionLabelExpression="separating clips from metadataForm"
		pctComplete="10"
		nextStep="ingest asset"
		>
		<script>
		<![CDATA[
			def clipJsons = new ArrayList()
			
			if (metadataForm.clips != null && metadataForm.clips.size() > 0)
				{clipJsons.addAll(metadataForm.clips)}
				
			return clipJsons
		]]>
		</script>
	</groovyStep>
	
	
	<!-- .................................................. ingest asset .................................................. -->
	<executeSubflowStep name="ingest asset"
		targetWorkflowId="${ingestSubflow}"
	    resultDataDef="assetMaster"
		subjectChangePath="${fileToIngest}"
		subflowTargetDataDef="fileToIngest"
	    executionLabelExpression="ingesting ${fileToIngest.name}"
	    pctComplete="70"
	    nextStep="set source file path json"
		>
		<subflowContextDataMapping parentDataDef="collections"              subflowDataDef="collections"/>
		<subflowContextDataMapping parentDataDef="metadataForm"             subflowDataDef="metadataForm"/>
		<subflowContextDataMapping parentDataDef="metadataFormType"         subflowDataDef="metadataFormType"/>
	</executeSubflowStep>
	
	
	<setContextData name="set source file path json"
		devStep="true"
		pctComplete="72"
		nextStep="check to create clips"
		>
		<set targetDataDef="sourceFilePathJson">
		<![CDATA[
			{
				"from":"${#mapPath(fileToIngest.absolutePath, targetOS).replaceAll('\\','\\\\')}",
				"to":"${#mapPath(assetMaster.originalContent.file.absolutePath, targetOS).replaceAll('\\','\\\\')}"
			}
		]]>
		</set>
	</setContextData>
	

	<noopStep name="check to create clips" 
		executionLabelExpression="Video Asset? ${assetMaster.assetType.equals('Video')} | Sidecar clips? ${clipJsons != null AND clipJsons.size() &gt; 0}"
		pctComplete="75"
		>
		<transition condition="${assetMaster.assetType.equals('Video') AND (clipJsons != null AND clipJsons.size() &gt; 0)}">
			<targetStepName>create clips</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>

	
	<executeSubflowStep name="create clips"
		targetWorkflowId="${createClipSubflow}"
		subjectChangePath="${clipJsons}"
		subflowTargetDataDef="clipJson"
		executionLabelExpression="creating ${clipJsons.size()} clips"
		subflowExecutionLimitExpression="50"
		pctComplete="95"
		nextStep="cleanup"
		>
		<subflowContextDataMapping parentDataDef="assetMaster" 	    subflowDataDef="video"/>
		<subflowContextDataMapping parentDataDef="collections"      subflowDataDef="collections"/>
		<subflowContextDataMapping parentDataDef="metadataFormType" subflowDataDef="metadataFormType"/>
	</executeSubflowStep>
	

	<!-- ............................................... cleanup temp files ............................................... -->
	<noopStep name="cleanup" 
		executionLabelExpression="temp ingest file? ${fileToIngest.exists()} | temp metadata file? ${metadataFile?.exists()}"
		pctComplete="96"
		>
		<transition condition="${fileToIngest.exists()}">
			<targetStepName>remove temp ingest file</targetStepName>
		</transition>
		<transition condition="${metadataFile?.exists()}">
			<targetStepName>remove json file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>
	

	<deleteFileStep name="remove temp ingest file"
	    sourceFilesExpression="${fileToIngest}"
	    executionLabelExpression="deleting ${fileToIngest.absolutePath}"
	    pctComplete="98"
		>
		<transition condition="${metadataFile?.exists()}">
			<targetStepName>remove json file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</deleteFileStep>
	

	<deleteFileStep name="remove json file"
	    sourceFilesExpression="${metadataFile}"
	    executionLabelExpression="deleting ${metadataFile.absolutePath}"
	    pctComplete="99"
		nextStep="end"
		/>
	
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- Success -->
	<noopStep name="end" pctComplete="100"/>

	
	<!-- Fail -->
	<failWorkflowStep name="metadata extraction error"
		reasonExpression="Metadata extraction error. Could not parse file: ${metadataFile.absolutePath}. Check logs for more information."
		executionLabelExpression="Metadata extraction error. Could not parse file: ${metadataFile.absolutePath}. Check logs for more information."
		/>
	
	
	<!-- ............................................... Context Data Defs ................................................ -->
	<!-- .......... Input Variables .......... -->
	<!-- required -->
	<contextDataDef name="fileToIngest" 		dataType="File" 		 	required="true"/>
	<contextDataDef name="targetOS" 			dataType="String"/>
	<!-- optional -->
	<contextDataDef name="collections" 			dataType="Data Object" 		multiple="true"/>
	
	<!-- ....... Processing Variables ........ -->
	<!-- sidecar data -->
	<contextDataDef name="metadataFile" 		dataType="File"				defaultDataExpression="${filepathFunc}${baseFilenameFunc}.json"/>
	<contextDataDef name="clipJsons" 			dataType="JSON"			    multiple="true"/>
	<contextDataDef name="metadataForm" 		dataType="MetadataForm"/>
	<contextDataDef name="metadataFormType"     dataType="String"           defaultDataExpression="panel">
		<description>
			TEMPORARY!!! (Forms will be standardized to the same format in the future)
			Valid types = "access" or "panel"
		</description>
	</contextDataDef>
	<!-- asset data -->
	<contextDataDef name="asset" 				dataType="Data Object"/>
	<contextDataDef name="assetMaster" 			dataType="Data Object"/>
	<contextDataDef name="sourceFilePathJson" 	dataType="JSON"/>
	<contextDataDef name="ingestSubflow"      	dataType="String" 		    defaultDataExpression="${#sysconfig('workflows.default.ingestAssetWorkflow') != null? #sysconfig('workflows.default.ingestAssetWorkflow') : '_anyAssetIngest'}"/>
	<contextDataDef name="createClipSubflow"    dataType="String"           defaultDataExpression="${#sysconfig('workflows.default.panel.createClipWorkflow') != null? #sysconfig('workflows.default.panel.createClipWorkflow') : 'panelCreateClipWithSidecarMetadata'}"/>
	<!-- s3 -->
	<contextDataDef name="s3Region" 		    dataType="String" 		    defaultDataExpression="${#sysconfig('s3.region')}"/>
	<!--
		TEMPORARY!!! (use functions when updated for S3)
		replacement for WF fucntions to work with S3 paths 
	-->
	<contextDataDef name="extensionFunc" 		dataType="String" 			defaultDataExpression="${fileToIngest.absolutePath.substring(fileToIngest.absolutePath.lastIndexOf('.') + 1 )}"/>
	<contextDataDef name="filenameFunc" 		dataType="String" 			defaultDataExpression="${fileToIngest.absolutePath.contains('/')? fileToIngest.absolutePath.substring(fileToIngest.absolutePath.lastIndexOf('/') + 1 ) : fileToIngest.absolutePath.substring(fileToIngest.absolutePath.lastIndexOf('\') + 1 ) }"/>
	<contextDataDef name="baseFilenameFunc" 	dataType="String" 			defaultDataExpression="${fileToIngest.absolutePath.contains('/')? fileToIngest.absolutePath.substring(fileToIngest.absolutePath.lastIndexOf('/') + 1 ,fileToIngest.absolutePath.lastIndexOf('.')) : fileToIngest.absolutePath.substring(fileToIngest.absolutePath.lastIndexOf('\') + 1 ,fileToIngest.absolutePath.lastIndexOf('.')) }"/>
	<contextDataDef name="filepathFunc" 		dataType="String" 			defaultDataExpression="${fileToIngest.absolutePath.contains('/')? fileToIngest.absolutePath.substring(0,fileToIngest.absolutePath.lastIndexOf('/'))+ '/' : fileToIngest.absolutePath.substring(0,fileToIngest.absolutePath.lastIndexOf('\'))+ '\'  }"/>
</workflow>
