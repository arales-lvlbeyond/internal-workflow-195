<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2018 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
    id="_createDocumentProxies"
    name="Create Document Proxies"
    executionLabelExpression="Create Document Proxies | Asset Name: ${subject.name}"
    description=""
    subjectDOClassName="DocumentAssetMaster"
    showInUserInterface="false"
    resultDataDef=""
    deadlineExpression=""
    sdkVersion="5.21"
    >
	
	<initialStepName>get source path</initialStepName>
	
	
	<!-- TODO: Remove this step when s3 is supported by runCommand or convertImageStep supports multi-page PDFs -->
	<groovyStep name="get source path"
		resultDataDef="sourceFilePath"
		pctComplete="1"
		devStep="true"
		nextStep="check proxies options"
		>
		<script>
		<![CDATA[
			import com.routeto1.filesystem.ObjectStoreFileWrapper
			return sourceFile instanceof ObjectStoreFileWrapper ? ((ObjectStoreFileWrapper) sourceFile).getAuthenticatedURL() : sourceFile?.absolutePath
		]]>
		</script>
	</groovyStep>
	
	
	<!-- ................................................... Initial Checks .................................................... -->
	<noopStep name="check proxies options"
		executionLabelExpression="Proxy option? ${proxyFile != null AND !proxyFile.absolutePath.equals('')? 'File' : (createProxy? (validSubtitleExtension? 'Create Subtitle' : (validExtension? 'Create' : 'Invalid Extension')) : 'None')} | Thumb option? ${thumbFile != null AND !thumbFile.absolutePath.equals('')? 'File' : (createThumb? (validExtension? 'Create' : 'Invalid Extension') : 'None')}"
		pctComplete="2"
		>
		<!-- Proxy -->
		<transition condition="${proxyFile != null AND !proxyFile.absolutePath.equals('') AND #proxyContent(subject) != null AND #proxyContent(subject).file.exists()}">
			<targetStepName>delete old proxy</targetStepName>
		</transition>
		<transition condition="${proxyFile != null AND !proxyFile.absolutePath.equals('')}">
			<targetStepName>save proxy</targetStepName>
		</transition>
		<transition condition="${createProxy AND validSubtitleExtension}">
			<targetStepName>create subtitle proxy</targetStepName>
		</transition>
		<transition condition="${createProxy AND validExtension}">
			<targetStepName>create proxy</targetStepName>
		</transition>
		<!-- Thumb -->
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('') AND #thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('')}">
			<targetStepName>save thumb</targetStepName>
		</transition>
		<transition condition="${createThumb AND validExtension}">
			<targetStepName>create thumb</targetStepName>
		</transition>
		<!-- Nothing to do -->
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ..................................................... Proxy Steps ..................................................... -->
	<!-- TODO: Change this step to convertImageStep (commented below) when the convertImageStep supports multi-page PDFs -->
	<runCommandStep name="create proxy"
		executablePathExpression="${imagemagick}"
		priorityExpression="${proxyPriority}"
		continueOnException="true"
		executionLabelExpression="create proxy from original file using ImageMagick."
		pctComplete="35"
		>
		<transition condition="${tempProxyFile?.exists()}">
			<targetStepName>set proxy file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>proxy error</targetStepName>
		</transition>
		
		<arg>${sourceFilePath}[0]</arg>
		<arg>-define</arg>
		<arg>jpeg:extent=5000kb</arg>
		<arg>${tempProxyFile}</arg>
	</runCommandStep>
	
	<!--
	<convertImageStep name="create proxy"
		sourceFileExpression="${sourceFile}"
		targetExtensionExpression="jpg"
		imageMagickParamsExpression="${proxyArguments}"
		resultDataDef="tempProxyFile"
		priorityExpression="${proxyPriority}"
		continueOnException="true"
		executionLabelExpression="create proxy from original file using ImageMagick."
		pctComplete="35"
		>
		<transition condition="${tempProxyFile?.exists()}">
			<targetStepName>set proxy file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>proxy error</targetStepName>
		</transition>
	</convertImageStep>
	-->
	
	
	<convertSubtitlesStep name="create subtitle proxy"
		sourceFileExpression="${sourceFile?.absolutePath}"
		resultDataDef="tempProxyFile"
		continueOnException="true"
		executionLabelExpression="create subtitle proxy from original file."
		pctComplete="35"
		>
		<transition condition="${tempProxyFile?.exists()}">
			<targetStepName>set proxy file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>proxy error</targetStepName>
		</transition>
	</convertSubtitlesStep>
	
	
	<setContextData name="set proxy file"
		targetDataDef="proxyFile"
		valueExpression="${tempProxyFile}"
		pctComplete="37"
		devStep="true"
		>
		<transition condition="${#proxyContent(subject) != null AND #proxyContent(subject).file.exists()}">
			<targetStepName>delete old proxy</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>save proxy</targetStepName>
		</transition>
	</setContextData>
	
	
	<deleteFileStep name="delete old proxy"
		sourceFilesExpression="${ #proxyContent(subject)?.file }"
		executionLabelExpression="deleting old proxy: ${#proxyContent(subject)?.file?.absolutePath}"
		continueOnException="true"
		pctComplete="40"
		nextStep="save proxy"
		/>
	
	
	<saveAssetStep name="save proxy"
		contentExpression="${proxyFile}"
		contentUseExpression="Proxy"
		versionAssetExpression="false"
		assetExpression="${subject.currentVersion}"
		executionLabelExpression="Save new proxy to asset | file: ${proxyFile?.absolutePath}"
		pctComplete="45"
		>
		<!-- Errors -->
		<exception-transition type="WorkflowException">
			<targetStepName>proxy error</targetStepName>
		</exception-transition>
		<exception-transition type="AssetException">
			<targetStepName>proxy error</targetStepName>
		</exception-transition>
		<exception-transition type="NullPointerException">
			<targetStepName>proxy error</targetStepName>
		</exception-transition>
		<exception-transition type="Exception">
			<targetStepName>proxy error</targetStepName>
		</exception-transition>
		<!-- Thumb -->
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('') AND #thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('')}">
			<targetStepName>save thumb</targetStepName>
		</transition>
		<transition condition="${createThumb AND validExtension}">
			<targetStepName>create thumb</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</saveAssetStep>
	
	
	<noopStep name="proxy error"
		executionLabelExpression="there was an error creating/saving proxy. | fail? ${failOnError}"
		>
		<transition condition="${failOnError}">
			<targetStepName>proxy failed</targetStepName>
		</transition>
		<!-- Thumb -->
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('') AND #thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="${thumbFile != null AND !thumbFile.absolutePath.equals('')}">
			<targetStepName>save thumb</targetStepName>
		</transition>
		<transition condition="${createThumb AND validExtension}">
			<targetStepName>create thumb</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ................................................... Thumbnail Steps ................................................... -->
	<!-- TODO: Change this step to convertImageStep (commented below) when the convertImageStep supports multi-page PDFs -->
	<runCommandStep name="create thumb"
		executablePathExpression="${imagemagick}"
		priorityExpression="${thumbPriority}"
		continueOnException="true"
		executionLabelExpression="create thumb from original file using ImageMagick."
		pctComplete="80"
		>
		<transition condition="${tempThumbFile != null AND tempThumbFile.exists()}">
			<targetStepName>set thumb file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>thumb error</targetStepName>
		</transition>
		
		<arg>${sourceFilePath}[0]</arg>
		<arg>-define</arg>
		<arg>jpeg:extent=400kb</arg>
		<arg>${tempThumbFile}</arg>
	</runCommandStep>
	
	<!--
	<convertImageStep name="create thumb"
		sourceFileExpression="${sourceFile}"
		targetExtensionExpression="jpeg"
		imageMagickParamsExpression="${thumbArguments}"
		resultDataDef="tempThumbFile"
		priorityExpression="${thumbPriority}"
		continueOnException="true"
		executionLabelExpression="create thumb from original file using ImageMagick."
		pctComplete="80"
		>
		<transition condition="${tempThumbFile != null AND tempThumbFile.exists()}">
			<targetStepName>set thumb file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>thumb error</targetStepName>
		</transition>
	</convertImageStep>
	-->
	
	
	<setContextData name="set thumb file"
		targetDataDef="thumbFile"
		valueExpression="${tempThumbFile}"
		pctComplete="82"
		devStep="true"
		>
		<transition condition="${#thumbnailContent(subject) != null AND #thumbnailContent(subject).file.exists()}">
			<targetStepName>delete old thumb</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>save thumb</targetStepName>
		</transition>
	</setContextData>
	
	
	<deleteFileStep name="delete old thumb"
		sourceFilesExpression="${ #thumbnailContent(subject)?.file }"
		executionLabelExpression="deleting old thumb: ${#thumbnailContent(subject)?.file?.absolutePath}"
		continueOnException="true"
		pctComplete="85"
		nextStep="save thumb"
		/>
	
	
	<saveAssetStep name="save thumb"
		contentExpression="${thumbFile}"
		contentUseExpression="Thumbnail"
		versionAssetExpression="false"
		assetExpression="${subject.currentVersion}"
		executionLabelExpression="Save new thumb to asset | file: ${thumbFile?.absolutePath}"
		pctComplete="90"
		>
		<!-- Errors -->
		<exception-transition type="WorkflowException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<exception-transition type="AssetException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<exception-transition type="NullPointerException">
			<targetStepName>thumb error</targetStepName>
		</exception-transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</saveAssetStep>
	
	
	<noopStep name="thumb error"
		executionLabelExpression="there was an error creating/saving thumbnail. | fail? ${failOnError}"
		>
		<transition condition="${failOnError}">
			<targetStepName>thumb failed</targetStepName>
		</transition>
		<!-- Nothing more to do -->
		<transition condition="true">
			<targetStepName>cleanup</targetStepName>
		</transition>
	</noopStep>
	
	
	<!-- ................................................... Clean Up Steps .................................................... -->
	<noopStep name="cleanup"
		executionLabelExpression="temp files?... proxy? ${tempProxyFile != null AND tempProxyFile.exists()} | thumbnail? ${tempThumbFile != null AND tempThumbFile.exists()}"
		pctComplete="92"
		>
		<transition condition="${tempProxyFile != null AND tempProxyFile.exists()}">
			<targetStepName>delete temp proxy file</targetStepName>
		</transition>
		<transition condition="${tempThumbFile != null AND tempThumbFile.exists()}">
			<targetStepName>delete temp thumbnail file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</noopStep>
	
	
	<deleteFileStep name="delete temp proxy file"
		sourceFilesExpression="${tempProxyFile}"
		continueOnException="true"
		executionLabelExpression="deleting ${tempProxyFile.absolutePath}"
		pctComplete="95"
		>
		<transition condition="${tempThumbFile != null AND tempThumbFile.exists()}">
			<targetStepName>delete temp thumbnail file</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>end</targetStepName>
		</transition>
	</deleteFileStep>
	
	
	<deleteFileStep name="delete temp thumbnail file"
		sourceFilesExpression="${tempThumbFile}"
		continueOnException="true"
		executionLabelExpression="deleting ${tempThumbFile.absolutePath}"
		pctComplete="99"
		nextStep="end"
		/>
	
	
	<!-- ...................................................... End Steps ...................................................... -->
	<!-- success -->
	<noopStep name="end"	pctComplete="100"/>
	
	
	<!-- fail -->
	<failWorkflowStep name="proxy failed"
		reasonExpression="Proxy failed. Check workflow steps for errors."
		executionLabelExpression="Proxy failed. Check workflow steps for errors."
		/>
	
	
	<failWorkflowStep name="thumb failed"
		reasonExpression="Thumbnail failed. Check workflow steps for errors."
		executionLabelExpression="Thumbnail failed. Check workflow steps for errors."
		/>
	
	
	<!-- .................................................. Context Data Defs .................................................. -->
	<!-- ............ Input Variables ............. -->
	<contextDataDef name="failOnError"              dataType="Boolean"      defaultDataExpression="${#sysconfig('workflows.default.proxies.failOnError') ?: true}"/>
	<!-- Proxy -->
	<contextDataDef name="proxyFile"                dataType="File"/>
	<contextDataDef name="createProxy" 			    dataType="Boolean"		defaultDataExpression="${#sysconfig('workflows.default.proxies.document.createProxy') ?: true}"/>
	<!-- Thumb -->
	<contextDataDef name="thumbFile"                dataType="File"/>
	<contextDataDef name="createThumb" 			    dataType="Boolean"	    defaultDataExpression="${#sysconfig('workflows.default.proxies.document.createThumb') ?: true}"/>
	<!-- ImageMagick args -->
	<contextDataDef name="thumbArguments"           dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.document.thumbArguments') ?: '-define jpeg:extent=400kb'}"/>
	<contextDataDef name="proxyArguments"           dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.document.proxyArguments') ?: '-define jpeg:extent=5000kb'}"/>
	<contextDataDef name="prioritiesJson"           dataType="JSON">
		<description>
			A JSON with the structure:
				{"proxy":x, "thumbnail":z}
		</description>
	</contextDataDef>
	
	<!-- .......... Processing variables .......... -->
	<contextDataDef name="sourceFile" 		        dataType="File"         defaultDataExpression="${#sourceContent(subject)?.file}"/>
	<contextDataDef name="proxyPriority"            dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('proxy') != null? prioritiesJson.get('proxy').asText() : 0}"/>
	<contextDataDef name="thumbPriority"            dataType="Integer"      defaultDataExpression="${prioritiesJson?.get('thumbnail') != null? prioritiesJson.get('thumbnail').asText() : 0}"/>
	<contextDataDef name="imagemagick"              dataType="String"       defaultDataExpression="${#sysconfig('imagemagick.path') != null? (#sysconfig('imagemagick.path').endsWith('/')? #sysconfig('imagemagick.path') : #sysconfig('imagemagick.path') + '/') : '/usr/local/bin/'}convert"/>
	<contextDataDef name="scratchPath" 		        dataType="String"	    defaultDataExpression="${#sysconfig('filesystem.root.temp').endsWith('/')? #sysconfig('filesystem.root.temp') : #sysconfig('filesystem.root.temp') + '/'}"/>
	<!-- TODO: Remove default values for "tempThumbFile" and "tempProxyFile" when convertImageStep supports multi-page PDFs -->
	<contextDataDef name="tempThumbFile"            dataType="File"         defaultDataExpression="${scratchPath}${#baseFilename(sourceFile?.name)}_thumb.jpeg"/>
	<contextDataDef name="tempProxyFile"            dataType="File"         defaultDataExpression="${scratchPath}${#baseFilename(sourceFile?.name)}_proxy.jpg"/>
	<!-- valid extensions for proxy/thumb -->
	<contextDataDef name="extensionsString"         dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.document.extensions') ?: 'pdf,txt'}"/>
	<contextDataDef name="extensions"               dataType="String"       multiple="true"     defaultDataExpression="${extensionsString != null? #splitString(extensionsString, ',', true, true) : null}"/>
	<contextDataDef name="validExtension"           dataType="Boolean"      defaultDataExpression="${extensions != null AND extensions.?[#this.equals(#extension(#root.sourceFile?.name).toLowerCase())].size() &gt; 0}"/>
	<!-- valid extensions for subtitle proxy (must be in extensions also to generate thumbnails) -->
	<contextDataDef name="subtitleExtensionsString" dataType="String"       defaultDataExpression="${#sysconfig('workflows.default.proxies.document.subtitleExtensions') ?: 'itt,ttml,dfxp,vtt'}"/>
	<contextDataDef name="subtitleExtensions"       dataType="String"       multiple="true"     defaultDataExpression="${subtitleExtensionsString != null? #splitString(subtitleExtensionsString, ',', true, true) : null}"/>
	<contextDataDef name="validSubtitleExtension"   dataType="Boolean"      defaultDataExpression="${subtitleExtensions != null AND subtitleExtensions.?[#this.equals(#extension(#root.sourceFile?.name).toLowerCase())].size() &gt; 0}"/>
	<!--
		TODO: Remove this variable when s3 is supported by runCommand or convertImageStep supports multi-page PDFs
			TODO: replace mentions of "sourceFilePath" with "sourceFile" for convertImage or "sourceFile?.absolutePath" for runCommand
	-->
	<contextDataDef name="sourceFilePath"           dataType="String"/>
</workflow>