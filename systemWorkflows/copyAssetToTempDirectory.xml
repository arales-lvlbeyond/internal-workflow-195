<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2018 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://levelsbeyond.com/schema/workflow"
    xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
    xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
    id="copyAssetToTempDirectory"
    name="Copy Asset To Temp Directory"
    executionLabelExpression="Copy Asset To Temp Directory | Asset: ${assetMaster.name} | Destination: ${directoryToZip.absolutePath}"
    subjectDOClassName=""
    resultDataDef="resultFile"
    description=""
    showInUserInterface="false"
    sdkVersion="5.21"
    >
    
    
    <initialStepName>check requested quality</initialStepName>

    
    <noopStep name="check requested quality"
        executionLabelExpression="Quality To Copy: ${assetQuality} | Source exists? ${assetMaster.originalContent != null AND assetMaster.originalContent.file.exists()} | Mezz Exists? ${assetMaster.getMezzanineContent() != null AND assetMaster.getMezzanineContent().file.exists()} | Proxy Exists? ${assetMaster?.getProxyContent() != null and assetMaster.getProxyContent()?.file.exists()}"
        pctComplete="5"
        >
        <transition condition="${assetQuality == 'Proxy' AND assetMaster.getProxyContent() != null AND assetMaster.getProxyContent()?.file.exists() }">
            <targetStepName>cp proxy to directory</targetStepName>
        </transition>
        <transition condition="${assetQuality == 'Mezzanine' AND assetMaster.getMezzanineContent() != null AND assetMaster.getMezzanineContent().file.exists()}">
            <targetStepName>cp mezzanine to directory</targetStepName>
        </transition>
        <transition condition="${assetQuality == 'Source' AND assetMaster.originalContent != null AND assetMaster.originalContent.file.exists()}">
            <targetStepName>cp source to directory</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>cannot copy</targetStepName>
        </transition>
    </noopStep>

    
    <copyFileStep name="cp proxy to directory"
        executionLabelExpression="Copying proxy to Directory ${directoryToZip.absolutePath}"
        sourceFileExpression="${assetMaster.getProxyContent().file.absolutePath}"
        targetDirectoryExpression="${directoryToZip.absolutePath}"
        createTargetDirectoryFlag="true"
        resultDataDef="resultFile"
        pctComplete="99"
        nextStep="end"
        />

    
    <copyFileStep name="cp mezzanine to directory"
        executionLabelExpression="Copying mezzanine to Directory ${directoryToZip.absolutePath}"
        sourceFileExpression="${assetMaster.getMezzanineContent().file.absolutePath}"
        targetDirectoryExpression="${directoryToZip.absolutePath}"
        createTargetDirectoryFlag="true"
        resultDataDef="resultFile"
        pctComplete="99"
        nextStep="end"
        />

    
    <copyFileStep name="cp source to directory"
        executionLabelExpression="Copying source to Directory ${directoryToZip.absolutePath}"
        sourceFileExpression="${assetMaster.originalContent.file.absolutePath}"
        targetDirectoryExpression="${directoryToZip.absolutePath}"
        createTargetDirectoryFlag="true"
        resultDataDef="resultFile"
        pctComplete="99"
        nextStep="end"
        />
    
    
    <!-- ................................................... End Steps .................................................... -->
    <noopStep name="cannot copy"
        executionLabelExpression="Invalid quality selected or the matching file does not exist"
        pctComplete="99"
        nextStep="end"
        />
        
    
    <noopStep name="end" pctComplete="100"/>
    
    
    <!-- ............................................... Context Data Defs ................................................ -->
    <!-- .......... Input Variables .......... -->
    <contextDataDef name="assetMaster"      dataType="Data Object"/>
    <contextDataDef name="directoryToZip"   dataType="Directory"/>
    <contextDataDef name="assetQuality"     dataType="String"/>
    
    <!-- ....... Processing Variables ........ -->
    <contextDataDef name="resultFile"       dataType="File"/>
</workflow>