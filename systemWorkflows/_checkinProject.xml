<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2018 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->

<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
	id="_checkinProject"
	name="Check In Project"
	executionLabelExpression="Check In Project | File: ${projectFile.name}"
	subjectDOClassName=""
	showInUserInterface="false"
	resultDataDef="project"
	sdkVersion=""
	>
    
	<initialStepName>check for sidecar xml</initialStepName>
	

	<!-- ................................................. Sidecar Steps .................................................. -->
	<noopStep name="check for sidecar xml"
		executionLabelExpression="sidecar XML given? ${projectXmlFile != null}"
		devStep="true"
		>
		<transition condition="${projectXmlFile != null}">
			<targetStepName>validate sidecar xml</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>check for pre-checkin script</targetStepName>
		</transition>
	</noopStep>

	
	<validateXmlStep name="validate sidecar xml"
		pctComplete="10"
		executionLabelExpression="validate xml: ${projectXmlFile.name}"
		xmlExpression="${projectXmlFile}"
		nextStep="check for pre-checkin script"
		/>
	
	
	<!-- ........................................... Custom Pre-checkin Script ............................................ -->
	<noopStep name="check for pre-checkin script"
		executionLabelExpression="pre-checkin script to run? ${preCheckinScriptPath != null or preCheckinCommand != null}"
		devStep="true"
		>
		<transition condition="${preCheckinScriptPath != null or preCheckinCommand != null}">
			<targetStepName>run pre-checkin script</targetStepName>
		</transition>
		<transition condition="=true">
			<targetStepName>check for project id</targetStepName>
		</transition>
	</noopStep>
	
	
	<runCommandStep name="run pre-checkin script"
		pctComplete="30"
		executionLabelExpression="run pre-checkin script: ${preCheckinScriptPath ?: preCheckinCommand}"
		executablePathExpression="${preCheckinScriptPath}"
		executableNameExpression="${preCheckinCommand}"
		nextStep="check for project id"
		>
		<arg>${projectFile.absolutePath}</arg>
	</runCommandStep>
	
	
	<!-- ................................................ Checkin Project ................................................. -->
	<noopStep name="check for project id"
		executionLabelExpression="project id passed in? ${projectId != null}"
		devStep="true"
		>
		<transition condition="${projectId != null}">
			<targetStepName>look up project</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>check for Avid compression</targetStepName>
		</transition>
	</noopStep>
	
	
	<queryStep name="look up project"
		pctComplete="40"
		executionLabelExpression="Find Project with ID: ${projectId}"
		targetDataObjectClass="Project"
		resultDataDef="project"
		>
		<transition condition="${project != null}">
			<targetStepName>get project variables</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>check for Avid compression</targetStepName>
		</transition>
		<criteria>
		<![CDATA[
			<criteria>
                <and>
                    <condition property="id" op="eq"><test value="${projectId}"/></condition>
                </and>
			</criteria>
		]]>
		</criteria>
	</queryStep>
	
	
	<setContextData name="get project variables"
		executionLabelExpression="project found? ${project != null}"
		devStep="true"
		nextStep="check for Avid compression"
		>
		<set targetDataDef="projectAsset">${project?.projectAsset}</set>
		<set targetDataDef="nleType">${project?.nleType}</set>
		<set targetDataDef="projectAssetTemplate">${(#extension(fileToCheckin).toLowerCase() == 'xml' and nleType != 'OTHER') ? 'projectXML' : 'projectSource'}</set>
	</setContextData>
	
	
	<noopStep name="check for Avid compression"
		executionLabelExpression="Project NLE = AVID? ${nleType == 'AVID'}"
		devStep="true"
		>
		<transition condition="${nleType == 'AVID'}">
			<targetStepName>compress avid directory</targetStepName>
		</transition>
		<transition condition="true">
			<targetStepName>check in project asset</targetStepName>
		</transition>
	</noopStep>
	
	
	<compressFileStep name="compress avid directory"
		pctComplete="50"
		sourceFilesExpression="${projectFile.isDirectory() ? projectFile : projectFile.parentFile}"
		resultDataDef="fileToCheckin"
		nextStep="check in project asset"
		/>
	
	
	<checkinAsset name="check in project asset"
		pctComplete="70"
		executionLabelExpression="check in the file ${project != null ? 'into existing project: ' + project.name : 'as a new project:'}"
		assetExpression="${projectAsset}"
		contentExpression="${fileToCheckin}"
		contentTemplateExpression="${projectAssetTemplate}"
		checkinDescriptionExpression="${checkinDescription}"		
		keepLockedExpression="${keepLocked}"
		resultDataDef="projectAsset"
		nextStep="associate project asset to project"
		/>
	
	
    <saveDataObjectStep name="associate project asset to project"
    	targetDataObjectClass="Project"    	
    	dataObjectExpression="${project}"
    	resultDataDef="project"
	    devStep="true"
	    nextStep="import project"
        >
    	<property name="projectAsset">${projectAsset.masterAsset}</property>
	    <property name="nleType">${nleType}</property>
    </saveDataObjectStep>
	
	
	<!-- .............................................. Import With Sidecar ............................................... -->
	<executeSubflowStep name="import project"
		pctComplete="90"
		targetWorkflowId="_importProject"
		subjectChangePath="${project}"
		resultDataDef="project"
		nextStep="raise project checkin event"
		>
		<subflowContextDataMapping parentDataDef="fileToCheckin"        subflowDataDef="projectFile"/>
		<subflowContextDataMapping parentDataDef="projectXmlFile"       subflowDataDef="projectXmlFile"/>
		<subflowContextDataMapping parentDataDef="projectXml"           subflowDataDef="projectXml"/>
		<subflowContextDataMapping parentDataDef="keepLocked"           subflowDataDef="keepLocked"/>
		<subflowContextDataMapping parentDataDef="nleType"              subflowDataDef="nleType"/>
		<subflowContextDataMapping parentDataDef="ingestExternalMedia"  subflowDataDef="ingestExternalMedia"/>
	</executeSubflowStep>
	
	
	<raiseWorkflowEventStep name="raise project checkin event"
		eventTypeExpression="ProjectCheckin"
		summaryExpression="Project ${project.name} has been checked in"
		severityExpression="INFO"
		devStep="true"
		nextStep="end"
		/>
	
	
	<!-- ................................................... End Steps .................................................... -->
	<noopStep name="end"/>
	
	
	<!-- ............................................... Context Data Defs ................................................ -->
	<!-- Input -->
	<contextDataDef name="projectFile"          dataType="File"         required="true"/>
	<contextDataDef name="checkinDescription"   dataType="String"       required="true"/>
	<contextDataDef name="nleType"              dataType="String"/>
	<contextDataDef name="projectXmlFile"       dataType="File"/>
	<contextDataDef name="projectId"            dataType="Integer"/>
	<contextDataDef name="keepLocked"           dataType="Boolean"      defaultDataExpression="false"/>
	<contextDataDef name="ingestExternalMedia"  dataType="Boolean"      defaultDataExpression="false"/>
	<contextDataDef name="preCheckinScriptPath" dataType="File"/>
	<contextDataDef name="preCheckinCommand"    dataType="String"/>
	
	<!-- Processing -->
	<contextDataDef name="projectXml"           dataType="XML"          defaultDataExpression="${projectXmlFile}"/>
	<contextDataDef name="fileToCheckin"        dataType="File"         defaultDataExpression="${projectFile}"/>
	<contextDataDef name="project"              dataType="Data Object"/>
	<contextDataDef name="projectAsset"         dataType="Data Object"/>
	<contextDataDef name="projectAssetTemplate" dataType="String"/>
	
</workflow>
